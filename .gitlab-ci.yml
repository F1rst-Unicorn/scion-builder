stages:
  - pre-build
  - build
  - test
  - deploy

test-connectivity:
  stage: pre-build
  image: busybox
  script:
    - ping github.com -c1
    - nc -vz packages.netsec.inf.ethz.ch 22

.build-deb-script: &build-deb-script
  script:
    # Prepare operating system
    - cp debian/apt.sources.list /etc/apt/sources.list
    - rm -rf /var/lib/apt/lists/*
    - apt update && apt install -y git wget unzip
    # Clone SCION source code
    - git clone $CI_SCION_REPO -b $CI_SCION_BRANCH scion
    # Install selected release of BAZEL
    - wget $CI_BAZEL_URL -O bazel_install_script.sh
    - bash bazel_install_script.sh
    # Set variables in BUILD.bazel
    - sed -i "s/CI_TARGET_ARCHITECTURE/$CI_TARGET_ARCHITECTURE/g" BUILD.bazel
    # Override some files from upstream SCION
    - cp common.sh scion/env/common.sh
    - cp deps.sh scion/env/debian/deps
    - cp BUILD.bazel scion/BUILD.bazel
    # Copy build-related directories into SCION codebase
    - cp -r conf scion
    - cp -r debian scion
    - cp -r postinst scion
    - cp -r rhel scion
    - cp -r systemd scion
    - cp scion-systemd-wrapper scion
    # Copy platform-specific patches into SCION codebase
    - cp --verbose -r platform-patches/$CI_TARGET_ARCHITECTURE/. scion || true
    # Install SCION dependencies
    - cd scion
    - ./env/debian/deps
    # Build SCION packages
    - bazel build //:scion-systemd-wrapper-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
    - bazel build //:scion-border-router-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
    - bazel build //:scion-beacon-server-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
    - bazel build //:scion-certificate-server-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
    - bazel build //:scion-path-server-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
    - bazel build //:scion-daemon-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
    - bazel build //:scion-dispatcher-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
    - bazel build //:scion-tools-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
    - bazel build //:scionlab-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
    # Prepare packages to shipment
    - mkdir ../output-$CI_TARGET_ARCHITECTURE
    - cp bazel-bin/*_$CI_TARGET_ARCHITECTURE.deb ../output-$CI_TARGET_ARCHITECTURE

build-all-deb-amd64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
  <<: *build-deb-script
  artifacts:
    paths:
    - output-amd64/
    expire_in: 1 hour

build-all-deb-arm64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: arm64
  <<: *build-deb-script
  artifacts:
    paths:
      - output-arm64/
    expire_in: 1 hour
#  allow_failure: true

test-deb-amd64:
  stage: test
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
  script:
    - cd output-$CI_TARGET_ARCHITECTURE
    - ls | xargs dpkg -i

deploy-deb:
  stage: deploy
  image: $CI_DOCKER_IMAGE
  before_script:
    - 'which ssh-agent || ( apt update && apt-get install -qq openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$CI_SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh $CI_SCP_TARGET "rm -f /tmp/*.deb"
  script:
    - ls -l output*/*.deb
    - scp output*/*.deb $CI_SCP_TARGET:/tmp
    - ssh $CI_SCP_TARGET "set -o xtrace && cd /tmp && for deb in `ls *.deb`; do reprepro -b /home/reprepro/reprepro includedeb $CI_DEB_CODENAME \$deb; done"
