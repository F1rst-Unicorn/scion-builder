stages:
  - pre-build
  - build
  - test-1
  - test-2
  - test-3
  - pre-deploy
  - deploy
  - post-deploy

connectivity-check:
  stage: pre-build
  image: busybox
  script:
    - ping github.com -c1
    - nc -vz packages.netsec.inf.ethz.ch 22

.build-deb-script: &build-deb-script
  script:
    # Prepare operating system
    - echo "Acquire::By-Hash \"yes\"; " > /etc/apt/apt.conf.d/01byhash
    - apt update && apt install -y apt-transport-https
    - cp debian/apt.sources.list /etc/apt/sources.list
    - rm -rf /var/lib/apt/lists/* && apt update && apt install -y git wget curl unzip gcc file python
    - curl -fSL "https://dl.google.com/go/go$CI_GOLANG_VERSION.linux-amd64.tar.gz" | tar xzC /usr/local
    - ln -f -s /usr/local/go/bin/* /usr/bin/
    # Install multiplatform toolchains
    - apt install -y libc6-armhf-cross libc6-dev-armhf-cross gcc-arm-linux-gnueabihf gcc-arm-linux-gnueabi binutils-arm-linux-gnueabihf binutils-arm-linux-gnueabi
    - apt install -y libc6-arm64-cross libc6-dev-arm64-cross gcc-aarch64-linux-gnu
    # Clone SCION source code
    - git clone $CI_SCION_REPO -b $CI_SCION_BRANCH scion
    - mkdir -p $HOME/go/src/github.com/scionproto/
    - ln -s $(pwd)/scion /root/go/src/github.com/scionproto/
    # Install SCION defined dependencies
    - apt install -y $(grep -vE "^\s*#" scion/env/debian/pkgs.txt | tr "\n" " ")
    # Clone SCIONLab source code
    - git clone $CI_SCIONLAB_REPO -b $CI_SCIONLAB_BRANCH scionlab
    - mkdir -p $HOME/go/src/github.com/netsec-ethz/
    - ln -s $(pwd)/scionlab /root/go/src/github.com/netsec-ethz/
    # Install selected release of BAZEL
    - wget https://github.com/bazelbuild/bazel/releases/download/$CI_BAZEL_VERSION/bazel-$CI_BAZEL_VERSION-installer-linux-x86_64.sh -O bazel_install_script.sh
    - bash bazel_install_script.sh
    # Set variables in BUILD.bazel
    - source ./RELEASE
    - sed -i "s/CI_TARGET_ARCHITECTURE/$CI_TARGET_ARCHITECTURE/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCION_SYSTEMD_WRAPPER/$PKG_VERSION_SCION_SYSTEMD_WRAPPER/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCION_BORDER_ROUTER/$PKG_VERSION_SCION_BORDER_ROUTER/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCION_BEACON_SERVER/$PKG_VERSION_SCION_BEACON_SERVER/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCION_CERTIFICATE_SERVER/$PKG_VERSION_SCION_CERTIFICATE_SERVER/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCION_PATH_SERVER/$PKG_VERSION_SCION_PATH_SERVER/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCION_DAEMON/$PKG_VERSION_SCION_DAEMON/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCION_DISPATCHER/$PKG_VERSION_SCION_DISPATCHER/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCION_TOOLS/$PKG_VERSION_SCION_TOOLS/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCIONLAB/$PKG_VERSION_SCIONLAB/g" BUILD.bazel
#    - '[[ $CI_COMMIT_TAG == release/* ]] && export CI_PKG_VERSION=$(echo $CI_COMMIT_TAG | sed "s@release/@@g") && sed -i "s/0.0.0/$CI_PKG_VERSION/g" BUILD.bazel && echo $CI_PKG_VERSION || true'
    # Override some files from upstream SCION
    - cp BUILD.bazel scion/BUILD.bazel
    - pushd scion && for i in ../patches/*.patch; do git apply $i --verbose; done || true
    - popd
    # Copy SCIONLab automatic configuration script into SCION codebase
    - cp scionlab/scionlab/hostfiles/scionlab-config scion/scionlab-config
    # Copy build-related directories into SCION codebase
    - cp -r debian scion
    - cp -r logrotate scion
    - cp -r rhel scion
    - cp -r systemd scion
    - cp scion-systemd-wrapper scion
    # Install SCION dependencies
    - cd $HOME/go/src/github.com/scionproto/scion
    - bazel fetch //...
    - wget https://github.com/kormat/bzlcompat/releases/download/v0.6/bzlcompat-v0.6-linux-x86_64 -O /usr/bin/bzlcompat && chmod +x /usr/bin/bzlcompat
    - bzlcompat -vendorBase=go
    # Build SCION binaries
    - export CGO_ENABLED=1
    - export GOOS=linux
    - '[ "$CI_TARGET_ARCHITECTURE" == "armhf" ] && export GOARCH=arm || export GOARCH=$CI_TARGET_ARCHITECTURE'
    - export CC=$CI_CC
    - pushd bin
    - go build ../go/border/
    - go build ../go/beacon_srv/
    - go build ../go/cert_srv/
    - go build ../go/path_srv/
    - go build ../go/sciond/
    - go build ../go/godispatcher/
    - go build ../go/examples/pingpong/
    - go build ../go/tools/scmp/
    - go build ../go/tools/showpaths/
    - popd
    # DEBUG ME
    - ls -la .
    # Build SCION packages
    - bazel build //:scion-systemd-wrapper-debian --workspace_status_command=./tools/bazel-build-env
    - bazel build //:scion-border-router-debian --workspace_status_command=./tools/bazel-build-env
    - bazel build //:scion-beacon-server-debian --workspace_status_command=./tools/bazel-build-env
    - bazel build //:scion-certificate-server-debian --workspace_status_command=./tools/bazel-build-env
    - bazel build //:scion-path-server-debian --workspace_status_command=./tools/bazel-build-env
    - bazel build //:scion-daemon-debian --workspace_status_command=./tools/bazel-build-env
    - bazel build //:scion-dispatcher-debian --workspace_status_command=./tools/bazel-build-env
    - bazel build //:scion-tools-debian --workspace_status_command=./tools/bazel-build-env
    - bazel build //:scionlab-debian --workspace_status_command=./tools/bazel-build-env
    # Prepare packages to shipment
    - mkdir ../output-$CI_TARGET_ARCHITECTURE
    - cp bazel-bin/*_$CI_TARGET_ARCHITECTURE.deb ../output-$CI_TARGET_ARCHITECTURE
    # Place hashes of git repos in the output for auditing
    - cd ../scion && git log -1
    - cd ../scionlab && git log -1

all-deb-amd64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_CC: gcc
  <<: *build-deb-script
  artifacts:
    paths:
    - output-amd64/
    expire_in: 1 hour

all-deb-arm64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: arm64
    CI_CC: aarch64-linux-gnu-gcc
  <<: *build-deb-script
  artifacts:
    paths:
      - output-arm64/
    expire_in: 1 hour

all-deb-armhf:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: armhf
    CI_CC: arm-linux-gnueabihf-gcc
  <<: *build-deb-script
  artifacts:
    paths:
      - output-armhf/
    expire_in: 1 hour

.test-deb-script: &test-deb-script
  script:
    - ls -l output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.deb
    # Test installation
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/scion-systemd-wrapper*$CI_TARGET_ARCHITECTURE.deb
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.deb
    # Test system after the installation
    - id scion
    - getent group scion
    - stat -c "%U %G" /var/log/scion | grep "scion scion"
    - stat -c "%U %G" /var/lib/scion | grep "scion scion"
    - stat -c "%U %G" /etc/scion | grep "scion scion"
    - ls /lib/systemd/system/$CI_PACKAGE*.service
    - ls /usr/bin/$CI_BINARY_NAME && stat --format '%a' /usr/bin/$CI_BINARY_NAME | grep 755
    - ls /etc/logrotate.d/$CI_PACKAGE
    # Test removal
    - dpkg --purge $CI_PACKAGE
    # Test system after the removal
    - id scion
    - getent group scion
    - "[[ ! -f /usr/bin/$CI_BINARY_NAME ]]"
    - "[[ ! -f /etc/logrotate.d/$CI_PACKAGE ]]"
    - "[[ $(ls /lib/systemd/system/$CI_PACKAGE*.service | wc -l) -eq 0  ]]"

.test-systemd-wrapper-deb-script: &test-systemd-wrapper-deb-script
  script:
    - ls -l output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.deb
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.deb
    - ls /usr/bin/$CI_BINARY_NAME && stat --format '%a' /usr/bin/$CI_BINARY_NAME | grep 755
    - dpkg --purge $CI_PACKAGE
    - "[[ ! -f /usr/bin/$CI_BINARY_NAME ]]"

.test-scion-tools-deb-script: &test-scion-tools-deb-script
  script:
    - ls -l output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.deb
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.deb
    - for CI_BINARY_NAME in $CI_BINARIES; do ls /usr/bin/$CI_BINARY_NAME && stat --format '%a' /usr/bin/$CI_BINARY_NAME | grep 755; done
    - dpkg --purge $CI_PACKAGE
    - for CI_BINARY_NAME in $CI_BINARIES; do [[ ! -f /usr/bin/$CI_BINARY_NAME ]]; done

.test-scionlab-deb-script: &test-scionlab-deb-script
  script:
    - apt update && apt install -y openvpn openssl python3
    - ls -l output-$CI_TARGET_ARCHITECTURE/scion*$CI_TARGET_ARCHITECTURE.deb
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/scion*$CI_TARGET_ARCHITECTURE.deb
    - ls /lib/systemd/system/scionlab.target
    - ls /usr/bin/$CI_BINARY_NAME && stat --format '%a' /usr/bin/$CI_BINARY_NAME | grep 755
    - dpkg --purge $CI_PACKAGE
    - "[[ ! -f /usr/bin/$CI_BINARY_NAME ]]"

systemd-wrapper-ubuntu-16.04-amd64-test:
  stage: test-1
  image: ubuntu:16.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-systemd-wrapper
    CI_BINARY_NAME: scion-systemd-wrapper
  <<: *test-systemd-wrapper-deb-script

systemd-wrapper-ubuntu-18.04-amd64-test:
  stage: test-1
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-systemd-wrapper
    CI_BINARY_NAME: scion-systemd-wrapper
  <<: *test-systemd-wrapper-deb-script

systemd-wrapper-debian-10-amd64-test:
  stage: test-1
  image: debian:buster
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-systemd-wrapper
    CI_BINARY_NAME: scion-systemd-wrapper
  <<: *test-systemd-wrapper-deb-script

scion-tools-ubuntu-16.04-amd64-test:
  stage: test-1
  image: ubuntu:16.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-tools
    CI_BINARIES: "pingpong scmp showpaths"
  <<: *test-scion-tools-deb-script

scion-tools-ubuntu-18.04-amd64-test:
  stage: test-1
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-tools
    CI_BINARIES: "pingpong scmp showpaths"
  <<: *test-scion-tools-deb-script

scion-tools-debian-10-amd64-test:
  stage: test-1
  image: debian:buster
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-tools
    CI_BINARIES: "pingpong scmp showpaths"
  <<: *test-scion-tools-deb-script

border-router-ubuntu-16.04-amd64-test:
  stage: test-2
  image: ubuntu:16.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-border-router
    CI_BINARY_NAME: border
  <<: *test-deb-script

border-router-ubuntu-18.04-amd64-test:
  stage: test-2
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-border-router
    CI_BINARY_NAME: border
  <<: *test-deb-script

border-router-debian-10-amd64-test:
  stage: test-2
  image: debian:buster
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-border-router
    CI_BINARY_NAME: border
  <<: *test-deb-script

beacon-server-ubuntu-16.04-amd64-test:
  stage: test-2
  image: ubuntu:16.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-beacon-server
    CI_BINARY_NAME: beacon_srv
  <<: *test-deb-script

beacon-server-ubuntu-18.04-amd64-test:
  stage: test-2
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-beacon-server
    CI_BINARY_NAME: beacon_srv
  <<: *test-deb-script

beacon-server-debian-10-amd64-test:
  stage: test-2
  image: debian:buster
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-beacon-server
    CI_BINARY_NAME: beacon_srv
  <<: *test-deb-script

certificate-server-ubuntu-16.04-amd64-test:
  stage: test-2
  image: ubuntu:16.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-certificate-server
    CI_BINARY_NAME: cert_srv
  <<: *test-deb-script

certificate-server-ubuntu-18.04-amd64-test:
  stage: test-2
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-certificate-server
    CI_BINARY_NAME: cert_srv
  <<: *test-deb-script

certificate-server-debian-10-amd64-test:
  stage: test-2
  image: debian:buster
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-certificate-server
    CI_BINARY_NAME: cert_srv
  <<: *test-deb-script

path-server-ubuntu-16.04-amd64-test:
  stage: test-2
  image: ubuntu:16.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-path-server
    CI_BINARY_NAME: path_srv
  <<: *test-deb-script

path-server-ubuntu-18.04-amd64-test:
  stage: test-2
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-path-server
    CI_BINARY_NAME: path_srv
  <<: *test-deb-script

path-server-debian-10-amd64-test:
  stage: test-2
  image: debian:buster
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-path-server
    CI_BINARY_NAME: path_srv
  <<: *test-deb-script

daemon-ubuntu-16.04-amd64-test:
  stage: test-2
  image: ubuntu:16.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-daemon
    CI_BINARY_NAME: sciond
  <<: *test-deb-script

daemon-ubuntu-18.04-amd64-test:
  stage: test-2
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-daemon
    CI_BINARY_NAME: sciond
  <<: *test-deb-script

daemon-debian-10-amd64-test:
  stage: test-2
  image: debian:buster
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-daemon
    CI_BINARY_NAME: sciond
  <<: *test-deb-script

dispatcher-ubuntu-16.04-amd64-test:
  stage: test-2
  image: ubuntu:16.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-dispatcher
    CI_BINARY_NAME: godispatcher
  <<: *test-deb-script

dispatcher-ubuntu-18.04-amd64-test:
  stage: test-2
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-dispatcher
    CI_BINARY_NAME: godispatcher
  <<: *test-deb-script

dispatcher-debian-10-amd64-test:
  stage: test-2
  image: debian:buster
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-dispatcher
    CI_BINARY_NAME: godispatcher
  <<: *test-deb-script

scionlab-ubuntu-16.04-amd64-test:
  stage: test-3
  image: ubuntu:16.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scionlab
    CI_BINARY_NAME: scionlab-config
  <<: *test-scionlab-deb-script

scionlab-ubuntu-18.04-amd64-test:
  stage: test-3
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scionlab
    CI_BINARY_NAME: scionlab-config
  <<: *test-scionlab-deb-script

scionlab-debian-10-amd64-test:
  stage: test-3
  image: debian:buster
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scionlab
    CI_BINARY_NAME: scionlab-config
  <<: *test-scionlab-deb-script

.deb-deploy-script: &deb-deploy-script
  before_script:
    - 'which ssh-agent || ( apt update && apt-get install -qq openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$CI_SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh -q $CI_SCP_TARGET "rm -f /tmp/*.deb"
  script:
    - scp -v output-$CI_DEB_PLATFORM/*.deb $CI_SCP_TARGET:/tmp
    - export files=$(ssh -q $CI_SCP_TARGET "cd /tmp && ls /tmp/*.deb") && echo $files
    - for deb in $files; do ssh -q $CI_SCP_TARGET "reprepro -b /home/reprepro/reprepro includedeb $CI_DEB_CODENAME $deb || true"; done
    - apt update && apt install -y apt-transport-https
    - echo "deb [trusted=yes] https://packages.netsec.inf.ethz.ch/debian $CI_DEB_CODENAME main" >> /etc/apt/sources.list && apt update
    - source ./RELEASE
    - export CI_VERSION=$(printenv `echo PKG_VERSION_SCIONLAB`)
    - apt install -y scionlab=$CI_VERSION

all-deb-pre-deploy:
  stage: pre-deploy
  image: $CI_DOCKER_IMAGE
  variables:
    CI_DEB_CODENAME: testing
    CI_DEB_PLATFORM: amd64
  <<: *deb-deploy-script

all-deb-deploy:
  stage: deploy
  image: $CI_DOCKER_IMAGE
  only:
    - master
  variables:
    CI_DEB_CODENAME: all
    CI_DEB_PLATFORM: "*"
  <<: *deb-deploy-script

.test-deb-deploy-script: &test-deb-deploy-script
  script:
    - apt update && apt install -y apt-transport-https
    - echo "deb [trusted=yes] https://packages.netsec.inf.ethz.ch/debian all main" >> /etc/apt/sources.list && apt update
    - source ./RELEASE
    - export CI_VERSION=$(printenv `echo $CI_VERSION_VARIABLE`)
    - apt show $CI_PACKAGE=$CI_VERSION

systemd-wrapper-deb-deploy-test:
  stage: post-deploy
  image: $CI_DOCKER_IMAGE
  only:
    - master
  variables:
    CI_PACKAGE: scion-systemd-wrapper
    CI_VERSION_VARIABLE: PKG_VERSION_SCION_SYSTEMD_WRAPPER
  <<: *test-deb-deploy-script

beacon-server-deb-deploy-test:
  stage: post-deploy
  image: $CI_DOCKER_IMAGE
  only:
    - master
  variables:
    CI_PACKAGE: scion-beacon-server
    CI_VERSION_VARIABLE: PKG_VERSION_SCION_BEACON_SERVER
  <<: *test-deb-deploy-script

certificate-server-deb-deploy-test:
  stage: post-deploy
  image: $CI_DOCKER_IMAGE
  only:
    - master
  variables:
    CI_PACKAGE: scion-certificate-server
    CI_VERSION_VARIABLE: PKG_VERSION_SCION_CERTIFICATE_SERVER
  <<: *test-deb-deploy-script

path-server-deb-deploy-test:
  stage: post-deploy
  image: $CI_DOCKER_IMAGE
  only:
    - master
  variables:
    CI_PACKAGE: scion-path-server
    CI_VERSION_VARIABLE: PKG_VERSION_SCION_PATH_SERVER
  <<: *test-deb-deploy-script

daemon-deb-deploy-test:
  stage: post-deploy
  image: $CI_DOCKER_IMAGE
  only:
    - master
  variables:
    CI_PACKAGE: scion-daemon
    CI_VERSION_VARIABLE: PKG_VERSION_SCION_DAEMON
  <<: *test-deb-deploy-script

dispatcher-deb-deploy-test:
  stage: post-deploy
  image: $CI_DOCKER_IMAGE
  only:
    - master
  variables:
    CI_PACKAGE: scion-dispatcher
    CI_VERSION_VARIABLE: PKG_VERSION_SCION_DISPATCHER
  <<: *test-deb-deploy-script

scion-tools-deb-deploy-test:
  stage: post-deploy
  image: $CI_DOCKER_IMAGE
  only:
    - master
  variables:
    CI_PACKAGE: scion-tools
    CI_VERSION_VARIABLE: PKG_VERSION_SCION_TOOLS
  <<: *test-deb-deploy-script

scionlab-deb-deploy-test:
  stage: post-deploy
  image: $CI_DOCKER_IMAGE
  only:
    - master
  variables:
    CI_PACKAGE: scionlab
    CI_VERSION_VARIABLE: PKG_VERSION_SCIONLAB
  <<: *test-deb-deploy-script

scionlab-deb-install-test:
  stage: post-deploy
  image: $CI_DOCKER_IMAGE
  only:
    - master
  variables:
    CI_PACKAGE: scionlab
    CI_VERSION_VARIABLE: PKG_VERSION_SCIONLAB
  script:
    - apt update && apt install -y apt-transport-https
    - echo "deb [trusted=yes] https://packages.netsec.inf.ethz.ch/debian all main" >> /etc/apt/sources.list && apt update
    - source ./RELEASE
    - export CI_VERSION=$(printenv `echo $CI_VERSION_VARIABLE`)
    - apt install -y $CI_PACKAGE=$CI_VERSION
