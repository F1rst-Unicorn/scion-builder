stages:
  - pre-build
  - build
  - test
  - deploy

dummy:
  stage: pre-build
  image: $CI_DOCKER_IMAGE
  script:
    - echo test

.build-deb-script: &build-deb-script
  script:
    - dpkg --add-architecture i386
    - dpkg --add-architecture armhf
    - dpkg --add-architecture arm64
    - dpkg --add-architecture amd64
    - cp apt.sources.list /etc/apt/sources.list
    - cp apt.prefs /etc/apt/preferences.d/pcap.pref
    - apt update && apt install -yq
      libpcap0.8:amd64
      libpcap0.8:arm64
      libpcap0.8:i386
      libpcap0.8:armhf
      build-essential
      gcc
      gcc-aarch64-linux-gnu
      gcc-arm-linux-gnueabihf
      g++
      g++-aarch64-linux-gnu
      g++-arm-linux-gnueabihf
      dpkg-dev
      golang-1.10-go
      capnproto
      bash
      linux-libc-dev:arm64
      linux-libc-dev:armhf
      linux-libc-dev:amd64
      linux-libc-dev:i386
      git
      debhelper
      debianutils
      debootstrap
      dh-make
      gnupg2
      libc6:arm64
      libc6:armhf
      libc6:amd64
      libc6:i386
      devscripts
      build-essential
      lintian
      uthash-dev:armhf
      uthash-dev:arm64
      uthash-dev:amd64
      uthash-dev:i386
      libpcap0.8-dev:amd64
      libpcap0.8-dev:arm64
      libpcap0.8-dev:armhf
      libpcap0.8-dev:i386
    - cp zlog.sh /bin/zlog.sh && /bin/zlog.sh
    - mkdir -p /data && cp -r debian /data/debian
    - cp build-in-tmp.sh /data/build-in-tmp.sh
    - cp scion.sh /bin/scion.sh && /bin/scion.sh
    - mkdir -p output-$CI_TARGET_ARCHITECTURE && cp -r /buildroot/debs output-$CI_TARGET_ARCHITECTURE

build-deb-amd64:
  stage: build
  image: $CI_DOCKER_IMAGE
  before_script:
    - export CI_TARGET_ARCHITECTURE=amd64
  <<: *build-deb-script
  artifacts:
    paths:
    - output-amd64/
    expire_in: 1 day

build-deb-arm64:
  only:
    - tags
  stage: build
  image: $CI_DOCKER_IMAGE
  before_script:
    - export CI_TARGET_ARCHITECTURE=arm64
  <<: *build-deb-script
  artifacts:
    paths:
    - output-arm64/
    expire_in: 1 day

build-deb-armhf:
  only:
    - tags
  stage: build
  image: $CI_DOCKER_IMAGE
  before_script:
    - export CI_TARGET_ARCHITECTURE=armhf
  <<: *build-deb-script
  artifacts:
    paths:
    - output-armhf/
    expire_in: 1 day

deploy-deb:
  stage: deploy
  image: $CI_DOCKER_IMAGE
  script:
    - ls -l output*/debs
