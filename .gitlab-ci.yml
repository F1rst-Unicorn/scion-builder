stages:
  - pre-build
  - build
  - test
  - deploy

dummy:
  stage: pre-build
  image: $CI_DOCKER_IMAGE
  script:
    - echo test

build-all-deb-amd64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
  script:
    # Prepare operating system
    - cp debian/apt.sources.list /etc/apt/sources.list
    - apt update && apt install -y git wget unzip
    # Clone SCION source code
    - git clone $CI_SCION_REPO -b $CI_SCION_BRANCH
    # Install selected release of BAZEL
    - wget $CI_BAZEL_URL -O bazel_install_script.sh
    - bash bazel_install_script.sh
    # Override some files from upstream SCION
    - cp common.sh scion/env/common.sh
    - cp deps.sh scion/env/debian/deps
    - cp BUILD.bazel scion/BUILD.bazel
    # Copy build-related directories into SCION codebase
    - cp -r conf scion
    - cp -r debian scion
    - cp -r postinst scion
    - cp -r rhel scion
    - cp -r systemd scion
    # Install SCION dependencies
    - cd scion
    - ./env/debian/deps
    # Build SCION packages
    - bazel build //:scion-border-router-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
    - bazel build //:scion-beacon-server-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
    - bazel build //:scion-certificate-server-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
    - bazel build //:scion-path-server-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
    - bazel build //:scion-ip-gateway-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
    - bazel build //:scion-daemon-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
    - bazel build //:scion-dispatcher-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
    - bazel build //:scion-tools-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
    # Prepare packages to shipment
    - mkdir ../output-$CI_TARGET_ARCHITECTURE
    - cp bazel-bin/*_$CI_TARGET_ARCHITECTURE.deb ../output-$CI_TARGET_ARCHITECTURE
  artifacts:
    paths:
    - output-amd64/
    expire_in: 1 hour

#build-daemon-deb-amd64:
#  stage: build
#  image: $CI_DOCKER_IMAGE
#  variables:
#    CI_TARGET_ARCHITECTURE: amd64
#  script:
#    # Prepare operating system
#    - cp debian/apt.sources.list /etc/apt/sources.list
#    - apt update && apt install -y git wget unzip
#    # Clone SCION source code
#    - git clone $CI_SCION_REPO -b $CI_SCION_BRANCH
#    # Install selected release of BAZEL
#    - wget $CI_BAZEL_URL -O bazel_install_script.sh
#    - bash bazel_install_script.sh
#    # Override some files from upstream SCION
#    - cp common.sh scion/env/common.sh
#    - cp deps.sh scion/env/debian/deps
#    - cp BUILD.bazel scion/BUILD.bazel
#    # Copy build-related directories into SCION codebase
#    - cp -r conf scion
#    - cp -r debian scion
#    - cp -r postinst scion
#    - cp -r rhel scion
#    - cp -r systemd scion
#    # Install SCION dependencies
#    - cd scion
#    - ./env/debian/deps
#    # Build SCION packages
##    - bazel build //:scion-border-router-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
##    - bazel build //:scion-beacon-server-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
##    - bazel build //:scion-certificate-server-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
##    - bazel build //:scion-path-server-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
##    - bazel build //:scion-ip-gateway-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
#    - bazel build //:scion-daemon-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
##    - bazel build //:scion-dispatcher-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
##    - bazel build //:scion-tools-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
#    # Prepare packages to shipment
#    - mkdir ../output-$CI_TARGET_ARCHITECTURE
#    - cp bazel-bin/*_$CI_TARGET_ARCHITECTURE.deb ../output-$CI_TARGET_ARCHITECTURE
#  artifacts:
#    paths:
#      - output-amd64/
#    expire_in: 1 hour

#build-deb-arm64:
#  only:
#    - tags
#  stage: build
#  image: $CI_DOCKER_IMAGE
#  before_script:
#    - export CI_TARGET_ARCHITECTURE=arm64
#  script:
#    - ./deps.sh
#    - /bin/zlog.sh
#    - /bin/scion.sh
#    - cp -r /buildroot/debs output-$CI_TARGET_ARCHITECTURE
#  artifacts:
#    paths:
#    - output-arm64/
#    expire_in: 1 hour
#
#build-deb-armhf:
#  only:
#    - tags
#  stage: build
#  image: $CI_DOCKER_IMAGE
#  before_script:
#    - export CI_TARGET_ARCHITECTURE=armhf
#  script:
#    - ./deps.sh
#    - /bin/zlog.sh
#    - /bin/scion.sh
#    - cp -r /buildroot/debs output-$CI_TARGET_ARCHITECTURE
#  artifacts:
#    paths:
#    - output-armhf/
#    expire_in: 1 hour

test-deb-amd64:
  stage: test
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
  script:
    - cd output-$CI_TARGET_ARCHITECTURE
    - ls | xargs dpkg -i

deploy-deb:
  stage: deploy
  image: $CI_DOCKER_IMAGE
  before_script:
    - 'which ssh-agent || ( apt update && apt-get install -qq openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$CI_SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - ls -l output*/*.deb
    - scp output*/*.deb $CI_SCP_TARGET:/tmp
    - cd output* && for deb in `ls *.deb`; do ssh $CI_SCP_TARGET "cd /tmp && reprepro -b /home/reprepro/reprepro includedeb $CI_DEB_CODENAME $deb"; done
  after_script:
    - ssh $CI_SCP_TARGET "rm -f /tmp/scion-*.deb"
