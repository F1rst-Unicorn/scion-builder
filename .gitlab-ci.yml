stages:
  - pre-build
  - build
  - test
  - deploy

connectivity-check:
  stage: pre-build
  image: busybox
  script:
    - ping github.com -c1
    - nc -vz packages.netsec.inf.ethz.ch 22

.build-deb-script: &build-deb-script
  script:
    # Prepare operating system
    - cp debian/apt.sources.list /etc/apt/sources.list
    - rm -rf /var/lib/apt/lists/*
    - apt update && apt install -y git wget unzip
    # Clone SCION source code
    - git clone $CI_SCION_REPO -b $CI_SCION_BRANCH scion
    # Install selected release of BAZEL
    - wget $CI_BAZEL_URL -O bazel_install_script.sh
    - bash bazel_install_script.sh
    # Set variables in BUILD.bazel
    - sed -i "s/CI_TARGET_ARCHITECTURE/$CI_TARGET_ARCHITECTURE/g" BUILD.bazel
    # Override some files from upstream SCION
    - cp patches/common.sh scion/env/common.sh
    - cp patches/deps.sh scion/env/debian/deps
    - cp BUILD.bazel scion/BUILD.bazel
    # Copy platform-specific patches into SCION codebase
    - cp --verbose -r patches/$CI_TARGET_ARCHITECTURE/. scion || true
    # Copy build-related directories into SCION codebase
    - cp -r conf scion
    - cp -r debian scion
    - cp -r postinst scion
    - cp -r rhel scion
    - cp -r systemd scion
    - cp scion-systemd-wrapper scion
    # Install SCION dependencies
    - cd scion
    - ./env/debian/deps
    # Build SCION packages
    - bazel build //:scion-systemd-wrapper-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
#    - bazel build //:scion-border-router-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
    - bazel build //:scion-beacon-server-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
#    - bazel build //:scion-certificate-server-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
#    - bazel build //:scion-path-server-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
#    - bazel build //:scion-daemon-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
#    - bazel build //:scion-dispatcher-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
#    - bazel build //:scion-tools-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
#    - bazel build //:scionlab-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_$CI_TARGET_ARCHITECTURE
    # Prepare packages to shipment
    - mkdir ../output-$CI_TARGET_ARCHITECTURE
    - cp bazel-bin/*_$CI_TARGET_ARCHITECTURE.deb ../output-$CI_TARGET_ARCHITECTURE

all-deb-amd64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
  <<: *build-deb-script
  artifacts:
    paths:
    - output-amd64/
    expire_in: 1 hour

all-deb-arm64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: arm64
  <<: *build-deb-script
  artifacts:
    paths:
      - output-arm64/
    expire_in: 1 hour
#  allow_failure: true

.test-deb-script: &test-deb-script
  script:
    - ls -l output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE_*_$CI_TARGET_ARCHITECTURE.deb
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/scion-systemd-wrapper_*_$CI_TARGET_ARCHITECTURE.deb
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE_*_$CI_TARGET_ARCHITECTURE.deb
    - id scion
    - getent group scion
    - stat -c "%U %G" /tmp | grep "/var/log/scion/"
    - stat -c "%U %G" /tmp | grep "/var/lib/scion/"
    - stat -c "%U %G" /tmp | grep "/etc/scion/"
    - ls /lib/systemd/system/$CI_PACKAGE*.service
    - ls /usr/bin/$CI_BINARY_NAME && stat --format '%a' /usr/bin/$CI_BINARY_NAME | grep 755

scion-systemd-wrapper-deb-amd64-test:
  stage: test
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-systemd-wrapper
    CI_BINARY_NAME: scion-systemd-wrapper
  script:
    - ls -l output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE_*_$CI_TARGET_ARCHITECTURE.deb
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE_*_$CI_TARGET_ARCHITECTURE.deb
    - ls /usr/bin/$CI_BINARY_NAME && stat --format '%a' /usr/bin/$CI_BINARY_NAME | grep 755

scion-border-router-deb-amd64-test:
  stage: test
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-border-router
    CI_BINARY_NAME: border
  <<: *test-deb-script

scion-beacon-server-deb-amd64-test:
  stage: test
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-beacon-server
    CI_BINARY_NAME: beacon_srv
  <<: *test-deb-script

scion-certificate-server-deb-amd64-test:
  stage: test
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-certificate-server
    CI_BINARY_NAME: cert_srv
  <<: *test-deb-script

scion-path-server-deb-amd64-test:
  stage: test
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-path-server
    CI_BINARY_NAME: path_srv
  <<: *test-deb-script

scion-daemon-deb-amd64-test:
  stage: test
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-daemon
    CI_BINARY_NAME: sciond
  <<: *test-deb-script

scion-dispatcher-deb-amd64-test:
  stage: test
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-dispatcher
    CI_BINARY_NAME: godispatcher
  <<: *test-deb-script

scion-tools-deb-amd64-test:
  stage: test
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-tools
    CI_BINARIES: "discovery_client pingpong buildkite_log_downloader logdog scion-custpk-load scion-pki scmp showpaths topopruner"
  script:
    - ls -l output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE_*_$CI_TARGET_ARCHITECTURE.deb
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE_*_$CI_TARGET_ARCHITECTURE.deb
    - for CI_BINARY_NAME in $CI_BINARIES; do ls /usr/bin/$CI_BINARY_NAME && stat --format '%a' /usr/bin/$CI_BINARY_NAME | grep 755; done

all-deb-deploy:
  stage: deploy
  image: $CI_DOCKER_IMAGE
  before_script:
    - 'which ssh-agent || ( apt update && apt-get install -qq openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$CI_SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh $CI_SCP_TARGET "rm -f /tmp/*.deb"
  script:
    - scp -v output*/*.deb $CI_SCP_TARGET:/tmp
    - export files=$(ssh $CI_SCP_TARGET "cd /tmp && ls /tmp/*.deb") && echo $files
    - for deb in $files; do ssh $CI_SCP_TARGET "reprepro -b /home/reprepro/reprepro includedeb $CI_DEB_CODENAME $deb"; done
