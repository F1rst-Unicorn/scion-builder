From 3c56f9bbde89b4c08e6fad15f0cd0e3ab901183f Mon Sep 17 00:00:00 2001
From: Matthias Frei <matthias.frei@inf.ethz.ch>
Date: Thu, 29 Aug 2019 17:29:58 +0200
Subject: [PATCH 1/3] Avoid cgo in lib/overlay/conn to simplify
 cross-compilation

cgo was only required to get a portable struct timespec.
The `syscall.Timespec` struct seems to provide this type just as well,
without requiring cgo.
---
 go/lib/overlay/conn/BUILD.bazel |  2 --
 go/lib/overlay/conn/c.go        | 30 ------------------------------
 go/lib/overlay/conn/conn.go     | 10 ++++++----
 3 files changed, 6 insertions(+), 36 deletions(-)
 delete mode 100644 go/lib/overlay/conn/c.go

diff --git a/go/lib/overlay/conn/BUILD.bazel b/go/lib/overlay/conn/BUILD.bazel
index ee8aee666c..85e726948a 100644
--- a/go/lib/overlay/conn/BUILD.bazel
+++ b/go/lib/overlay/conn/BUILD.bazel
@@ -3,10 +3,8 @@ load("@io_bazel_rules_go//go:def.bzl", "go_library")
 go_library(
     name = "go_default_library",
     srcs = [
-        "c.go",
         "conn.go",
     ],
-    cgo = True,
     importpath = "github.com/scionproto/scion/go/lib/overlay/conn",
     visibility = ["//visibility:public"],
     deps = select({
diff --git a/go/lib/overlay/conn/c.go b/go/lib/overlay/conn/c.go
deleted file mode 100644
index eeecfdcb0d..0000000000
--- a/go/lib/overlay/conn/c.go
+++ /dev/null
@@ -1,30 +0,0 @@
-// Copyright 2017 ETH Zurich
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//   http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package conn
-
-/*
-#include <sys/time.h>
-
-int sizeof_int = sizeof(int);
-int sizeof_struct_timeval = sizeof(struct timeval);
-*/
-import "C"
-
-const (
-	SizeOfInt      = C.sizeof_int
-	SizeOfTimespec = C.sizeof_struct_timespec
-)
-
-type Timespec C.struct_timespec
diff --git a/go/lib/overlay/conn/conn.go b/go/lib/overlay/conn/conn.go
index 97c8cd9bc7..65f58780b7 100644
--- a/go/lib/overlay/conn/conn.go
+++ b/go/lib/overlay/conn/conn.go
@@ -39,7 +39,9 @@ import (
 // opened sockets.
 const ReceiveBufferSize = 1 << 20

-var oobSize = syscall.CmsgSpace(SizeOfInt) + syscall.CmsgSpace(SizeOfTimespec)
+var sizeOfInt64 = int(unsafe.Sizeof(int64(0)))
+var sizeOfTimespec = int(unsafe.Sizeof(syscall.Timespec{}))
+var oobSize = syscall.CmsgSpace(sizeOfInt64) + syscall.CmsgSpace(sizeOfTimespec)
 var sizeIgnore = flag.Bool("overlay.conn.sizeIgnore", true,
 	"Ignore failing to set the receive buffer size on a socket.")

@@ -277,7 +279,7 @@ func (cc *connUDPBase) initConnUDP(network string, listen, remote *overlay.Overl
 		}
 		log.Warn(msg, ctx...)
 	}
-	oob := make(common.RawBytes, syscall.CmsgSpace(SizeOfInt)+syscall.CmsgSpace(SizeOfTimespec))
+	oob := make(common.RawBytes, oobSize)
 	cc.conn = c
 	cc.Listen = listen
 	cc.Remote = remote
@@ -322,8 +324,8 @@ func (c *connUDPBase) handleCmsg(oob common.RawBytes, meta *ReadMeta, readTime t
 		case hdr.Level == syscall.SOL_SOCKET && hdr.Type == syscall.SO_RXQ_OVFL:
 			meta.RcvOvfl = *(*int)(unsafe.Pointer(&oob[sizeofCmsgHdr]))
 		case hdr.Level == syscall.SOL_SOCKET && hdr.Type == syscall.SO_TIMESTAMPNS:
-			tv := *(*Timespec)(unsafe.Pointer(&oob[sizeofCmsgHdr]))
-			meta.Recvd = time.Unix(int64(tv.tv_sec), int64(tv.tv_nsec))
+			tv := *(*syscall.Timespec)(unsafe.Pointer(&oob[sizeofCmsgHdr]))
+			meta.Recvd = time.Unix(tv.Sec, tv.Nsec)
 			meta.ReadDelay = readTime.Sub(meta.Recvd)
 			// Guard against leap-seconds.
 			if meta.ReadDelay < 0 {

From a05e7cc75c2013a1fd40f390271a36cad03cef6e Mon Sep 17 00:00:00 2001
From: Matthias Frei <matthias.frei@inf.ethz.ch>
Date: Thu, 29 Aug 2019 22:04:12 +0200
Subject: [PATCH 2/3] Lint

---
 go/lib/overlay/conn/BUILD.bazel | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

diff --git a/go/lib/overlay/conn/BUILD.bazel b/go/lib/overlay/conn/BUILD.bazel
index 85e726948a..f8d48af29c 100644
--- a/go/lib/overlay/conn/BUILD.bazel
+++ b/go/lib/overlay/conn/BUILD.bazel
@@ -2,9 +2,7 @@ load("@io_bazel_rules_go//go:def.bzl", "go_library")

 go_library(
     name = "go_default_library",
-    srcs = [
-        "conn.go",
-    ],
+    srcs = ["conn.go"],
     importpath = "github.com/scionproto/scion/go/lib/overlay/conn",
     visibility = ["//visibility:public"],
     deps = select({

From 38d26d40129905094ed3e9fb4d5cdfb3d7dc6c6f Mon Sep 17 00:00:00 2001
From: Matthias Frei <matthias.frei@inf.ethz.ch>
Date: Fri, 30 Aug 2019 07:22:34 +0200
Subject: [PATCH 3/3] Convert platform dependant Timespec.Sec/Nsec to int64

---
 go/lib/overlay/conn/conn.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/go/lib/overlay/conn/conn.go b/go/lib/overlay/conn/conn.go
index 65f58780b7..81c99210a8 100644
--- a/go/lib/overlay/conn/conn.go
+++ b/go/lib/overlay/conn/conn.go
@@ -325,7 +325,7 @@ func (c *connUDPBase) handleCmsg(oob common.RawBytes, meta *ReadMeta, readTime t
 			meta.RcvOvfl = *(*int)(unsafe.Pointer(&oob[sizeofCmsgHdr]))
 		case hdr.Level == syscall.SOL_SOCKET && hdr.Type == syscall.SO_TIMESTAMPNS:
 			tv := *(*syscall.Timespec)(unsafe.Pointer(&oob[sizeofCmsgHdr]))
-			meta.Recvd = time.Unix(tv.Sec, tv.Nsec)
+			meta.Recvd = time.Unix(int64(tv.Sec), int64(tv.Nsec))
 			meta.ReadDelay = readTime.Sub(meta.Recvd)
 			// Guard against leap-seconds.
 			if meta.ReadDelay < 0 {

