load("@bazel_gazelle//:def.bzl", "gazelle")
load("@bazel_tools//tools/build_defs/pkg:pkg.bzl", "pkg_deb", "pkg_tar")
load("@io_bazel_rules_go//go:def.bzl", "nogo")

# gazelle:prefix github.com/scionproto/scion
gazelle(name = "gazelle")

# bazel build //:scion-border-router-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
# bazel build //:scion-border-router-debian --workspace_status_command=./tools/bazel-build-env --platforms=@io_bazel_rules_go//go/toolchain:linux_arm64

# Variables used to prepare DEB and RPM packages
PKG_ARCHITECTURE = "amd64"

PKG_BUILT_USING = "bazel (0.25.3)"

PKG_HOMEPAGE = "https://www.scion-architecture.net/"

PKG_MAINTAINER = "SCION Team <scionlab-admins@sympa.ethz.ch>"

PKG_PRORITY = "optional"

PKG_SECTION = "net"

PKG_VERSION = "0.2.0"

# SCION wrapper script
pkg_tar (
	name = "scion-systemd-wrapper-bin",
	srcs = [
		"scion-systemd-wrapper",
	],
	mode = "0755",
	package_dir = "/usr/bin",
)

pkg_deb(
    name = "scion-systemd-wrapper-debian",
    architecture = PKG_ARCHITECTURE,
    built_using = PKG_BUILT_USING,
    data = ":scion-systemd-wrapper-bin",
    description = "SCION systemd wrapper",
    homepage = PKG_HOMEPAGE,
    maintainer = PKG_MAINTAINER,
    package = "scion-systemd-wrapper",
    priority = PKG_PRORITY,
    section = PKG_SECTION,
    version = PKG_VERSION,
)

# SCION Border Router
pkg_tar(
    name = "scion-border-router-bin",
    srcs = [
        "//go/border",
    ],
    mode = "0755",
    package_dir = "/usr/bin",
)

pkg_tar(
    name = "scion-border-router-systemd",
    srcs = [
        "systemd/scion-border-router.service",
    ],
    mode = "0644",
    package_dir = "/etc/systemd/system",
)

pkg_tar(
    name = "scion-border-router",
    extension = "tar.gz",
    deps = [
        ":scion-border-router-bin",
        ":scion-border-router-systemd",
    ],
)

pkg_deb(
    name = "scion-border-router-debian",
    architecture = PKG_ARCHITECTURE,
    built_using = PKG_BUILT_USING,
    #    conffiles = [
    #        "/usr/local/corp/etc/app.flagfile",
    #    ],
    data = ":scion-border-router",
    depends = [
        "adduser",
        "scion-systemd-wrapper (=" + PKG_VERSION + ")",
    ],
    description = "SCION Border Router",
    homepage = PKG_HOMEPAGE,
    maintainer = PKG_MAINTAINER,
    package = "scion-border-router",
    postinst = "postinst/scion.postinst",
    priority = PKG_PRORITY,
    section = PKG_SECTION,
    version = PKG_VERSION,
)

# SCION Beacon Server
pkg_tar(
    name = "scion-beacon-server-bin",
    srcs = [
        "//go/beacon_srv",
    ],
    mode = "0755",
    package_dir = "/usr/bin",
)

pkg_tar(
    name = "scion-beacon-server-systemd",
    srcs = [
        "systemd/scion-beacon-server.service",
    ],
    mode = "0644",
    package_dir = "/etc/systemd/system",
)

pkg_tar(
    name = "scion-beacon-server",
    extension = "tar.gz",
    deps = [
        ":scion-beacon-server-bin",
        ":scion-beacon-server-systemd",
    ],
)

pkg_deb(
    name = "scion-beacon-server-debian",
    architecture = PKG_ARCHITECTURE,
    built_using = PKG_BUILT_USING,
    #    conffiles = [
    #        "/usr/local/corp/etc/app.flagfile",
    #    ],
    data = ":scion-beacon-server",
    depends = [
        "adduser",
        "scion-systemd-wrapper (=" + PKG_VERSION + ")",
    ],
    description = "SCION Beacon Server",
    homepage = PKG_HOMEPAGE,
    maintainer = PKG_MAINTAINER,
    package = "scion-beacon-server",
    postinst = "postinst/scion.postinst",
    priority = PKG_PRORITY,
    section = PKG_SECTION,
    version = PKG_VERSION,
)

# SCION Certificate Server
pkg_tar(
    name = "scion-certificate-server-bin",
    srcs = [
        "//go/cert_srv",
    ],
    mode = "0755",
    package_dir = "/usr/bin",
)

pkg_tar(
    name = "scion-certificate-server-systemd",
    srcs = [
        "systemd/scion-certificate-server.service",
    ],
    mode = "0644",
    package_dir = "/etc/systemd/system",
)

pkg_tar(
    name = "scion-certificate-server",
    extension = "tar.gz",
    deps = [
        ":scion-certificate-server-bin",
        ":scion-certificate-server-systemd",
    ],
)

pkg_deb(
    name = "scion-certificate-server-debian",
    architecture = PKG_ARCHITECTURE,
    built_using = PKG_BUILT_USING,
    #    conffiles = [
    #        "/usr/local/corp/etc/app.flagfile",
    #    ],
    data = ":scion-certificate-server",
    depends = [
        "adduser",
        "scion-systemd-wrapper (=" + PKG_VERSION + ")",
    ],
    description = "SCION Certificate Server",
    homepage = PKG_HOMEPAGE,
    maintainer = PKG_MAINTAINER,
    package = "scion-certificate-server",
    postinst = "postinst/scion.postinst",
    priority = PKG_PRORITY,
    section = PKG_SECTION,
    version = PKG_VERSION,
)

# SCION Path Server
pkg_tar(
    name = "scion-path-server-bin",
    srcs = [
        "//go/path_srv",
    ],
    mode = "0755",
    package_dir = "/usr/bin",
)

pkg_tar(
    name = "scion-path-server-systemd",
    srcs = [
        "systemd/scion-path-server.service",
    ],
    mode = "0644",
    package_dir = "/etc/systemd/system",
)

pkg_tar(
    name = "scion-path-server",
    extension = "tar.gz",
    deps = [
        ":scion-path-server-bin",
        ":scion-path-server-systemd",
    ],
)

pkg_deb(
    name = "scion-path-server-debian",
    architecture = PKG_ARCHITECTURE,
    built_using = PKG_BUILT_USING,
    #    conffiles = [
    #        "/usr/local/corp/etc/app.flagfile",
    #    ],
    data = ":scion-path-server",
    depends = [
        "adduser",
        "scion-systemd-wrapper (=" + PKG_VERSION + ")",
    ],
    description = "SCION Path Server",
    homepage = PKG_HOMEPAGE,
    maintainer = PKG_MAINTAINER,
    package = "scion-path-server",
    postinst = "postinst/scion.postinst",
    priority = PKG_PRORITY,
    section = PKG_SECTION,
    version = PKG_VERSION,
)

# SCION IP Gateway
pkg_tar(
    name = "scion-ip-gateway-bin",
    srcs = [
        "//go/sig",
    ],
    mode = "0755",
    package_dir = "/usr/bin",
)

pkg_tar(
    name = "scion-ip-gateway-systemd",
    srcs = [
        "systemd/scion-ip-gateway.service",
    ],
    mode = "0644",
    package_dir = "/etc/systemd/system",
)

pkg_tar(
    name = "scion-ip-gateway",
    extension = "tar.gz",
    deps = [
        ":scion-ip-gateway-bin",
        ":scion-ip-gateway-systemd",
    ],
)

pkg_deb(
    name = "scion-ip-gateway-debian",
    architecture = PKG_ARCHITECTURE,
    built_using = PKG_BUILT_USING,
    #    conffiles = [
    #        "/usr/local/corp/etc/app.flagfile",
    #    ],
    data = ":scion-ip-gateway",
    depends = [
        "adduser",
        "scion-systemd-wrapper (=" + PKG_VERSION + ")",
    ],
    description = "SCION IP Gateway",
    homepage = PKG_HOMEPAGE,
    maintainer = PKG_MAINTAINER,
    package = "scion-ip-gateway",
    postinst = "postinst/scion.postinst",
    priority = PKG_PRORITY,
    section = PKG_SECTION,
    version = PKG_VERSION,
)

# SCION Daemon
pkg_tar(
    name = "scion-daemon-bin",
    srcs = [
        "//go/sciond",
    ],
    mode = "0755",
    package_dir = "/usr/bin",
)

pkg_tar(
    name = "scion-daemon-systemd",
    srcs = [
        "systemd/scion-daemon@.service",
    ],
    mode = "0644",
    package_dir = "/etc/systemd/system",
)

pkg_tar(
    name = "scion-daemon",
    extension = "tar.gz",
    deps = [
        ":scion-daemon-bin",
        ":scion-daemon-systemd",
    ],
)

pkg_deb(
    name = "scion-daemon-debian",
    architecture = PKG_ARCHITECTURE,
    built_using = PKG_BUILT_USING,
    #    conffiles = [
    #        "/usr/local/corp/etc/app.flagfile",
    #    ],
    data = ":scion-daemon",
    depends = [
        "adduser",
        "scion-systemd-wrapper (=" + PKG_VERSION + ")",
    ],
    description = "SCION Daemon",
    homepage = PKG_HOMEPAGE,
    maintainer = PKG_MAINTAINER,
    package = "scion-daemon",
    postinst = "postinst/scion.postinst",
    priority = PKG_PRORITY,
    section = PKG_SECTION,
    version = PKG_VERSION,
)

# SCION Dispatcher
pkg_tar(
    name = "scion-dispatcher-bin",
    srcs = [
        "//go/godispatcher",
    ],
    mode = "0755",
    package_dir = "/usr/bin",
)

pkg_tar(
    name = "scion-dispatcher-systemd",
    srcs = [
        "systemd/scion-dispatcher.service",
    ],
    mode = "0644",
    package_dir = "/etc/systemd/system",
)

pkg_tar(
    name = "scion-dispatcher",
    extension = "tar.gz",
    deps = [
        ":scion-dispatcher-bin",
        ":scion-dispatcher-systemd",
    ],
)

pkg_deb(
    name = "scion-dispatcher-debian",
    architecture = PKG_ARCHITECTURE,
    built_using = PKG_BUILT_USING,
    #    conffiles = [
    #        "/usr/local/corp/etc/app.flagfile",
    #    ],
    data = ":scion-dispatcher",
    depends = [
        "adduser",
        "scion-systemd-wrapper (=" + PKG_VERSION + ")",
    ],
    description = "SCION Dispatcher",
    homepage = PKG_HOMEPAGE,
    maintainer = PKG_MAINTAINER,
    package = "scion-dispatcher",
    postinst = "postinst/scion.postinst",
    priority = PKG_PRORITY,
    section = PKG_SECTION,
    version = PKG_VERSION,
)

# SCION Tools
pkg_tar(
    name = "scion-tools-bin",
    srcs = [
        "//go/examples/discovery_client",
        "//go/examples/pingpong",
        "//go/tools/buildkite_log_downloader",
        "//go/tools/logdog",
        "//go/tools/scion-custpk-load",
        "//go/tools/scion-pki",
        "//go/tools/scmp",
        "//go/tools/showpaths",
        "//go/tools/topopruner",
    ],
    mode = "0755",
    package_dir = "/usr/bin",
)

pkg_deb(
    name = "scion-tools-debian",
    architecture = PKG_ARCHITECTURE,
    built_using = PKG_BUILT_USING,
    #    conffiles = [
    #        "/usr/local/corp/etc/app.flagfile",
    #    ],
    data = ":scion-tools-bin",
    depends = [
        "adduser",
    ],
    description = "SCION Tools",
    homepage = PKG_HOMEPAGE,
    maintainer = PKG_MAINTAINER,
    package = "scion-tools",
    postinst = "postinst/scion.postinst",
    priority = PKG_PRORITY,
    section = PKG_SECTION,
    version = PKG_VERSION,
)

# SCIONLab

pkg_tar(
    name = "scionlab-null",
    srcs = [],
    mode = "0755",
    package_dir = "/dev/null",
)

pkg_deb(
    name = "scionlab-debian",
    architecture = PKG_ARCHITECTURE,
    built_using = PKG_BUILT_USING,
    #    conffiles = [
    #        "/usr/local/corp/etc/app.flagfile",
    #    ],
    data = ":scionlab-null",
    depends = [
        "scion-border-router (=" + PKG_VERSION + ")",
        "scion-beacon-server (=" + PKG_VERSION + ")",
        "scion-certificate-server (=" + PKG_VERSION + ")",
        "scion-path-server (=" + PKG_VERSION + ")",
        "scion-ip-gateway (=" + PKG_VERSION + ")",
        "scion-daemon (=" + PKG_VERSION + ")",
        "scion-dispatcher (=" + PKG_VERSION + ")",
        "scion-tools (=" + PKG_VERSION + ")",
    ],
    description = "SCIONLab",
    homepage = PKG_HOMEPAGE,
    maintainer = PKG_MAINTAINER,
    package = "scionlab",
    postinst = "postinst/scion.postinst",
    priority = PKG_PRORITY,
    section = PKG_SECTION,
    version = PKG_VERSION,
)

# Nogo - Go code analysis tool
nogo(
    name = "nogo",
    config = "nogo.json",
    visibility = ["//visibility:public"],
    deps = [
        "//go/lint:log",
        "@org_golang_x_tools//go/analysis/passes/asmdecl:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/assign:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/atomic:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/bools:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/buildtag:go_tool_library",
        # This crashes the build of @com_github_vishvananda_netlink
        # "@org_golang_x_tools//go/analysis/passes/cgocall:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/composite:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/copylock:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/httpresponse:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/loopclosure:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/lostcancel:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/nilfunc:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/nilness:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/printf:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/shift:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/stdmethods:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/structtag:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/tests:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/unmarshal:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/unreachable:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/unsafeptr:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/unusedresult:go_tool_library",
    ],
)
